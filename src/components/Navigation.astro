---
interface Props {
  activePage?: 'docs' | 'blog';
}

const { activePage } = Astro.props;
---

<nav class="fixed top-0 left-0 right-0 bg-stone-50/80 backdrop-blur-sm z-50 border-b border-gray-200">
  <div class="max-w-7xl mx-auto px-6 py-4">
    <div class="flex items-center justify-between">
      <!-- Logo/Home Link -->
      <a 
        href="https://synaptik-core.dev" 
        class="flex items-center hover:opacity-70 transition-opacity external-link"
        aria-label="Synaptik Core Home"
        data-external="true"
      >
        <img 
          src="/synaptik-logo.png" 
          alt="Synaptik Core" 
          class="w-8 h-8 object-contain"
        />
      </a>

      <!-- Navigation Links -->
      <ul class="flex items-center gap-8 text-sm">
        <li>
          <a 
            href="/docs" 
            class={activePage === 'docs' ? 'font-medium' : 'hover:opacity-70'}
          >
            Docs
          </a>
        </li>
        <li>
          <a 
            href="/blog" 
            class={activePage === 'blog' ? 'font-medium' : 'hover:opacity-70'}
          >
            Blog
          </a>
        </li>
        <li>
          <a href="mailto:janayharris@synaptik-core.dev" class="hover:opacity-70">
            Contact
          </a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<!-- Loading Screen -->
<div id="loading-screen" class="loading-screen hidden">
  <div class="loading-content">
    <div class="logo-container">
      <img 
        src="/synaptik-logo.png" 
        alt="Synaptik Core" 
        class="loading-logo"
      />
    </div>
  </div>
</div>

<script>
  // Handle external link transitions with loading screen
  function setupExternalLinks() {
    const externalLinks = document.querySelectorAll('a[data-external="true"]');
    const loadingScreen = document.getElementById('loading-screen');
    
    externalLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const href = (e.currentTarget as HTMLAnchorElement).href;
        
        // Show loading screen
        if (loadingScreen) {
          loadingScreen.classList.remove('hidden');
          loadingScreen.classList.add('active');
        }
        
        // Navigate after a brief delay
        setTimeout(() => {
          window.location.href = href;
        }, 800);
      });
    });
  }

  // Run on initial load
  setupExternalLinks();

  // Re-run after view transitions
  document.addEventListener('astro:page-load', setupExternalLinks);
</script>

<style>
  .external-link {
    position: relative;
  }

  .external-link::after {
    content: 'â†—';
    display: inline-block;
    margin-left: 0.25rem;
    font-size: 0.75em;
    opacity: 0.6;
  }

  /* Loading Screen Styles */
  .loading-screen {
    position: fixed;
    inset: 0;
    z-index: 100;
    background-color: #fafaf9; /* stone-50 */
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.7s ease-in-out;
  }

  .loading-screen.active {
    opacity: 1;
    pointer-events: all;
  }

  .loading-screen.hidden {
    display: none;
  }

  .loading-content {
    text-align: center;
  }

  .logo-container {
    animation: logoEntry 0.6s ease-out forwards;
  }

  .loading-logo {
    width: 8rem;
    height: 8rem;
    object-fit: contain;
    animation: logoPulse 2s ease-in-out infinite;
  }

  @keyframes logoEntry {
    from {
      transform: scale(0.5) rotate(-180deg);
      opacity: 0;
    }
    50% {
      transform: scale(1.1) rotate(0deg);
    }
    to {
      transform: scale(1) rotate(0deg);
      opacity: 1;
    }
  }

  @keyframes logoPulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }
</style>
