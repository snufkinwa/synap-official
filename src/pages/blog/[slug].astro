---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog', (entry) => !entry.data.draft);
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();
const title = `${post.data.title} - Synaptik Core`;
const date = new Date(post.data.pubDate).toLocaleDateString('en-US', { dateStyle: 'long' });
const description = post.data.description || post.data.title;
const publishedTime = new Date(post.data.pubDate).toISOString();
---

<Layout 
	title={title}
	description={description}
	type="article"
	publishedTime={publishedTime}
	image={post.data.heroImage || '/synaptik-logo.png'}
	keywords={post.data.tags?.join(', ') || 'AI, verifiable AI, Synaptik Core'}
>
	<Navigation activePage="blog" />

	<!-- Hero Section with Line Pattern Background -->
	<div class="relative min-h-screen overflow-hidden bg-stone-50 flex flex-col">
		<!-- Animated Line Pattern Background -->
		<div class="absolute inset-0 opacity-20">
			<svg class="w-full h-full" xmlns="http://www.w3.org/2000/svg">
				<defs>
					<pattern id="lines" x="0" y="0" width="100%" height="100%">
						<line x1="0" y1="0" x2="100%" y2="100%" stroke="#666" stroke-width="0.5" opacity="0.3"/>
						<line x1="0" y1="10%" x2="95%" y2="100%" stroke="#666" stroke-width="0.5" opacity="0.25"/>
						<line x1="0" y1="20%" x2="90%" y2="100%" stroke="#666" stroke-width="0.5" opacity="0.2"/>
						<line x1="0" y1="30%" x2="85%" y2="100%" stroke="#666" stroke-width="0.5" opacity="0.15"/>
						<line x1="5%" y1="0" x2="100%" y2="95%" stroke="#666" stroke-width="0.5" opacity="0.25"/>
						<line x1="10%" y1="0" x2="100%" y2="90%" stroke="#666" stroke-width="0.5" opacity="0.2"/>
						<line x1="15%" y1="0" x2="100%" y2="85%" stroke="#666" stroke-width="0.5" opacity="0.15"/>
					</pattern>
				</defs>
				<rect width="100%" height="100%" fill="url(#lines)" />
			</svg>
		</div>

		<!-- Content -->
		<main class="relative z-10 max-w-4xl mx-auto px-4 sm:px-6 pt-24 sm:pt-32 pb-16 flex-grow">
			<article>
				<header class="mb-8 sm:mb-10">
					<h1 class="text-3xl sm:text-4xl md:text-5xl font-bold mb-3 leading-tight break-words">{post.data.title}</h1>
					<time class="text-sm text-gray-500">{date}</time>
					{post.data.tags?.length ? (
						<div class="mt-3 flex gap-2 flex-wrap">
							{post.data.tags.map((t: string) => (
								<span class="text-xs px-2 py-1 rounded-full bg-gray-200 text-gray-700">{t}</span>
							))}
						</div>
					) : null}
				</header>

				{post.data.heroImage ? (
					<figure class="mb-8 -mx-4 sm:mx-0">
						<img src={post.data.heroImage} alt={post.data.title} class="w-full h-auto rounded-none sm:rounded-lg border-y sm:border border-gray-200" />
						{post.data.heroImageCaption ? (
							<figcaption class="mt-2 px-4 sm:px-0 text-sm text-gray-600 text-left italic">
								{post.data.heroImageCaption}
							</figcaption>
						) : null}
					</figure>
				) : null}

				<div class="prose prose-stone max-w-none prose-headings:break-words prose-p:break-words prose-pre:overflow-x-auto prose-img:w-full prose-img:h-auto prose-img:-mx-4 sm:prose-img:mx-0 prose-img:rounded-none sm:prose-img:rounded-lg">
					<Content />
				</div>
			</article>
		</main>

		<Footer />
	</div>
</Layout>

<style>
  .prose :where(code):not(:where(pre code)) {
    background-color: rgba(0,0,0,0.05);
    padding: 0.15rem 0.35rem;
    border-radius: 0.25rem;
  }
</style>
